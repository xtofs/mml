// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and
//     will be lost if the code is regenerated.
// </auto-generated>
using model;

public class Schema: Node
{
    public  Schema (string Namespace, string Alias) : base(Namespace)
    {
        this.Elements = new ContainedCollection<SchemaElement>(this, (x) => x.Name);
    }

    public string Namespace { get; }

    public string Alias { get; }

    public ContainedCollection<SchemaElement> Elements { get; }
}

public interface SchemaElement: INode
{
}

public interface Type: INode
{
}

public interface ValueType: INode, Type
{
}

public class PrimitiveType: Node, SchemaElement, ValueType
{
    public  PrimitiveType (string Name) : base(Name)
    {
    }

}

public class EnumType: Node, SchemaElement, ValueType
{
    public  EnumType (string Name) : base(Name)
    {
        this.Members = new ContainedCollection<Member>(this, (x) => x.Name);
    }


    public ContainedCollection<Member> Members { get; }
}

public class Member: Node
{
    public  Member (string Name, int Value) : base(Name)
    {
    }


    public int Value { get; }
}

public class ComplexType: Node, SchemaElement, ValueType
{
    public  ComplexType (string Name) : base(Name)
    {
        this.Properties = new ContainedCollection<Property>(this, (x) => x.Name);
    }


    public ContainedCollection<Property> Properties { get; }
}

public class EntityType: Node, SchemaElement, Type
{
    public  EntityType (string Name) : base(Name)
    {
        this.Key = new ContainedSingleton<Key>(this);
        this.Properties = new ContainedCollection<Property>(this, (x) => x.Name);
    }


    public  ContainedSingleton<Key> Key { get; }

    public ContainedCollection<Property> Properties { get; }
}

public class Key: Node
{
    public  Key () : base("")
    {
        this.PropertyRefs = new ContainedCollection<PropertyRef>(this, (x) => x.Alias);
    }

    public ContainedCollection<PropertyRef> PropertyRefs { get; }
}

public class PropertyRef: Node
{
    public  PropertyRef (string Alias) : base(Alias)
    {
        this._Name = new ReferencedSingleton<Property>(this);
    }

    private ReferencedSingleton<Property> _Name { get; }
    public new Property Name { get => _Name.Get<Property>(); set => _Name.Set(value); }

    public string Alias { get; }
}

public interface Property: INode
{
}

public class StructuralProperty: Node, Property
{
    public  StructuralProperty (string Name) : base(Name)
    {
        this._Type = new ReferencedSingleton<ValueType>(this);
    }


    private ReferencedSingleton<ValueType> _Type { get; }
    public ValueType Type { get => _Type.Get<ValueType>(); set => _Type.Set(value); }
}

public class NavigationProperty: Node, Property
{
    public  NavigationProperty (string Name) : base(Name)
    {
        this._Type = new ReferencedSingleton<EntityType>(this);
    }


    private ReferencedSingleton<EntityType> _Type { get; }
    public EntityType Type { get => _Type.Get<EntityType>(); set => _Type.Set(value); }
}

