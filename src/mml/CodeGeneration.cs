namespace mml;

public static class MetaModelExtensions
{
    const string HEADER = """
        // <auto-generated>
        //     This code was generated by a tool.
        //
        //     Changes to this file may cause incorrect behavior and
        //     will be lost if the code is regenerated.
        // </auto-generated>
        """;
    public static void GenerateCode(this MetaModel model, TextWriter writer, string path)
    {
        writer.WriteLine(HEADER);
        writer.WriteLine($"// generated from {path}, written {File.GetLastWriteTime(path).ToString("yyyy-MM-dd HH::mm:ss")}");
        writer.WriteLine();
        writer.WriteLine($"using model;");



        foreach (var classifier in model.Classifiers)
        {
            switch (classifier)
            {
                case Class @class:
                    GenerateClass(@class, writer);
                    break;
                case Trait @trait:
                    GenerateInterface(@trait, writer);
                    break;
            }
        }
    }

    private static bool FilterByPrimitiveType(Field field, [MaybeNullWhen(false)] out (string Name, Builtin Type) res)
    {
        if (field.Type is Builtin bi) { res = (field.Name, bi); return true; }
        res = default!;
        return false;
    }

    private static void GenerateClass(Class classifier, TextWriter writer)
    {
        writer.WriteLine($"public class {classifier.Name}: Node{classifier.Extends.Join(", ", ", ")}");
        writer.WriteLine("{");

        var fieldsOfPrimitiveType = classifier.Fields.FilterSelect<Field, (string Name, Builtin Type)>(FilterByPrimitiveType);
        var fieldsOfNonPrimitiveType = classifier.Fields.Where(f => f.Type is not Builtin);

        #region constructor
        var args = string.Join(", ", from arg in fieldsOfPrimitiveType select $"{arg.Item2.CSharpName} {arg.Item1}");
        var nameField = fieldsOfPrimitiveType.Select(f => f.Name).FirstOrDefault() ?? "\"\"";

        writer.WriteLine($"    public  {classifier.Name} ({args}) : base({nameField})");
        writer.WriteLine($"    {{");
        foreach (var field in fieldsOfPrimitiveType)
        {
            writer.WriteLine($"        this.{field.Name} = {field.Name};");
        }
        foreach (var field in fieldsOfNonPrimitiveType)
        {
            var (name, type, _) = field;
            switch (type)
            {
                case Builtin bi:
                    break;
                case Contained co:
                    writer.WriteLine($"        this._{field.Name} = new ContainedSingleton<{co.Name}>(this);");
                    break;
                case Reference re:
                    writer.WriteLine($"        this._{field.Name} = new ReferencedSingleton<{re.Name}>(this, \"{field.Name}\");");
                    break;
                case Collection di:
                    writer.WriteLine($"        this.{field.Name} = new ContainedCollection<{di.Type}>(this, (x) => x.{string.Join(".", di.Path)});");
                    break;
                default:
                    throw new InvalidOperationException($"unknown enum value {type}");
            };
        }
        writer.WriteLine("    }");
        #endregion

        writer.WriteLine();
        writer.WriteLine("    public override string Tag {{ get; }} = \"{0}\";", classifier.Name);

        writer.WriteLine();
        writer.WriteLine("    public override IEnumerable<(string, object)> Attributes => [{0}];",
            string.Join(", ", from field in fieldsOfPrimitiveType select $"(nameof({field.Name}), {field.Name})")
        );

        #region properties, except the name property inherited from Node
        foreach (var field in classifier.Fields)
        {
            writer.WriteLine();

            var (name, type, _) = field;

            if (name == "Name" && type == Builtin.String)
            {
                continue;
            }
            var attr = name == "Name" ? "new " : "";

            switch (type)
            {
                case Builtin bi:
                    writer.WriteLine($"    public {attr}{bi.CSharpName} {name} {{ get; }}");
                    break;
                case Contained co:
                    writer.WriteLine($"    private ContainedSingleton<{co.Name}> _{name} {{ get; }}");
                    writer.WriteLine();
                    writer.WriteLine($"    public {attr}{co.Name} {name} {{ get => _{name}.Get(); set => _{name}.Set(value); }}");
                    break;
                case Reference re:
                    writer.WriteLine($"    private ReferencedSingleton<{re.Name}> _{name} {{ get; }}");
                    writer.WriteLine();
                    writer.WriteLine($"    public {attr}{re.Name} {name} {{ get => _{name}.Get(); set => _{name}.Set(value); }}");
                    break;
                case Collection di:
                    writer.WriteLine($"    public {attr}ContainedCollection<{di.Type}> {name} {{ get; }}");
                    break;
                default:
                    throw new InvalidOperationException($"unknown enum value {type}");
            }
            // writer.WriteLine($"    public {FieldAsProperty(field.Name, field.Type)} {{ get; protected init; }}");
        }
        #endregion

        writer.WriteLine("}");
        writer.WriteLine();
    }



    private static void GenerateInterface(Trait trait, TextWriter writer)
    {
        writer.WriteLine($"public interface {trait.Name}: INode{trait.Extends.Join(", ", ", ")}");
        writer.WriteLine("{");
        var fieldsOfPrimitiveType = trait.Fields.FilterSelect<Field, (string Name, Builtin Type)>(FilterByPrimitiveType);
        var fieldsOfNonPrimitiveType = trait.Fields.Where(f => f.Type is not Builtin);

        // properties except the name property inherited from Node
        foreach (var field in trait.Fields)
        {
            if (field.Name == "Name" && field.Type == Builtin.String)
            {
                continue;
            }
            writer.WriteLine();
            // writer.WriteLine($"    public {FieldAsProperty(field.Name, field.Type)} {{ get; protected init; }}");
        }

        writer.WriteLine("}");
        writer.WriteLine();
    }

    // static string FieldAsProperty(string name, FieldType type)
    // {
    //     return type switch
    //     {
    //         Builtin bi =>
    //             $"{bi.CSharpName} {name}",
    //         Contained co =>
    //             $"ContainedSingleton<{co.Name}> {name}",
    //         Reference re =>
    //             $"ReferencedSingleton<{re.Name}> {name}",
    //         Dictionary di =>
    //             $"ContainedCollection<{di.Type}> {name}",
    //         _ =>
    //             throw new InvalidOperationException($"unknown enum value {type}")
    //     };
    // }

    // static string PropertyInit(string name, FieldType type)
    // {
    //     return type switch
    //     {
    //         Builtin bi =>
    //             $"= default!; // = {name}",
    //         Contained co =>
    //             $"= new ContainedSingleton<{co.Name}>(this);",
    //         Reference re =>
    //             $"= new ReferencedSingleton<{re.Name}>(this);",
    //         Dictionary di =>
    //             $"= new ContainedCollection<{di.Type}>(this, (x) => x.{string.Join(".", di.Path)});",
    //         _ =>
    //             throw new InvalidOperationException($"unknown enum value {type}")
    //     };
    // }
}

